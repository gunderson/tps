var FS = require("q-io/fs");
var Q = require("q");
var Prompt = require("prompt");
var Path = require("path");
var Colors = require("colors");
var argv = require("yargs");
var _ = require("underscore");

var testing = argv.test;

var src = (testing) ? "./test/test_files" : argv.src || Path.resolve("./src/front-end");
var pagename = argv.pagename;
var site = argv.site;
var siteValues = {
	"f": "front-end",
	"front-end": "front-end",
	"c": "cms",
	"cms": "cms"
};

initialize();

function initialize(){
	console.log("Add a new Page to Tool project scaffold");

	var schema = { properties: {} };

	if (!argv.src) {
		schema.properties.site = {
			message: 'F'.underline.bold +'ront-end'.bold + ' or ' + 'C'.underline +'ms',
			default: site || 'front-end',
			required: true
		};
	}

	if (!argv.src) {
		schema.properties.pagename = {
			message: 'Page Name',
			default: 'new-page',
			required: true
		};
	}

	if (!testing && !pagename && !site){
		Prompt.start();
		Prompt.get(schema, promptComplete);
	} else {
		promptComplete(null, {pagename: pagename || "test"});
	}
}

function promptComplete(err, result){

	// validate values

	site = siteValues[result.site.toLowerCase()];
	pagename = result.pagename.toLowerCase();


	if (!site){
		console.error("Error: invalid site defined".red);
	} else if(!pagename){
		console.error("Error: invalid pagename defined".red);
	}

	// end validation

	src = (testing) ? "./test/test_files" : argv.src || Path.resolve("src/" + site);


	Q.all([
		createStylesheet(),
		createView(),
		createTemplate(),
		addSASSToIndex(),
		addJADEToIndex(),
		addToRouter()
	]);
}

function createStylesheet(){
	return FS.read(Path.resolve(__dirname + "/templates/sass.ust"))
		.then(function(filecontents){
			var content = _.template(filecontents)({pagename:pagename});
			console.log(">>".green, "Creating SASS Stylesheet");
			FS.write(Path.resolve(src + "/sass/pages/_" + pagename + ".sass"), content);
		})
		.then(function(){
			FS.mkdir(Path.resolve(src + "/sass/pages/" + pagename));
		})
		.catch(function(){
			console.log(arguments);
		});
}

function createView(){
	console.log(">>".green, "Creating Backbone View");
	return FS.read(Path.resolve(__dirname + "/templates/view.ust"))
		.then(function(filecontents){
			var content = _.template(filecontents)({pagename:pagename});
			FS.write(src + "/js/views/pages/" + pagename + "-view.js", content);
		})
		.then(function(){
			FS.mkdir(src + "/js/views/pages/" + pagename);
		})
		.catch(function(){
			console.log(arguments);
		});
}

function createTemplate(){
	console.log(">>".green, "Creating JADE Template");
	return FS.read(Path.resolve(__dirname + "/templates/jade.ust"))
		.then(function(filecontents){
			var content = _.template(filecontents)({pagename:pagename});
			FS.write(src + "/jade/static/pages/_" + pagename + ".jade", content);
		})
		.then(function(){
			FS.mkdir(src + "/jade/dynamic/pages/" + pagename);
			FS.mkdir(src + "/jade/static/pages/" + pagename);
		})
		.catch(function(){
			console.log(arguments);
		});
}

function addSASSToIndex(){
	console.log(">>".green, "Adding import to index.sass");
	return FS.read(src + "/sass/index.sass")
		.then(writeSASSIndex)
		.catch(function(){
			console.log(arguments);
		});
}

function writeSASSIndex(filecontents){
	var imports = filecontents.split("@import ");
	var importPath = "pages/" + pagename + "\n";

	// find last page import
	var lastimportIndex = imports.length;
	while (--lastimportIndex >= 0){
		if (imports[lastimportIndex].indexOf("pages/") !== -1){
			continue;
		}
	}

	if(lastimportIndex === -1) {
		//if there are no page imports, put it at the end
		imports[imports.length - 1] += "\n";
		imports.push(importPath);
	} else {
		//otherwise put it after the other imports
		if (imports[lastimportIndex].indexOf("\n") === -1) imports[lastimportIndex] += "\n";
		imports.splice(lastimportIndex + 1, 0, importPath);
	}

	return FS.write(src + "/sass/index.sass", imports.join("@import ").trim())
		.catch(function(){
			console.log(arguments);
		});
}


function addJADEToIndex(){
	console.log(">>".green, "Adding import to index.jade");
	return FS.read(src + "/jade/static/index.jade")
		.then(writeJADEIndex)
		.catch(function(){
			console.log(arguments);
		});
}

function writeJADEIndex(filecontents){
	var include = "include pages/_" + pagename + "\n";
	var lines = filecontents.split("\n");


	// find last page import
	var lastimportIndex = lines.length;
	var pagesline = -1;
	while (--lastimportIndex >= 0){

		if (lines[lastimportIndex].indexOf("#pages") !== -1){
			pagesline = lastimportIndex;
		}
		if (lines[lastimportIndex].indexOf("include pages/") !== -1){
			continue;
		}
	}

	//indent one tab deeper than #pages
	var indentation = lines[pagesline].split("#")[0] + "\t";

	if(lastimportIndex === -1) {
		//if there are no page includes, put it in #pages
		lines.splice(pagesline + 1, 0, indentation + include);
	} else {
		//otherwise put it after the other lines
		lines.splice(lastimportIndex + 1, 0, indentation + include);
	}


	return FS.write(src + "/jade/static/index.jade", lines.join("\n").trim())
		.catch(function(){
			console.log(arguments);
		});
}


function addToRouter(){
	console.log(">>".green, "Adding to Router");
	return FS.read(src + "/js/controllers/router.js")
		.then(writeRouter)
		.catch(function(){
			console.log(arguments);
		});
}

function writeRouter(filecontents){


	var parts = filecontents.split("routes: {\n");
	parts[1] = parts[1].split("\n\t}");
	var routes = parts[1].shift();

	parts[2] = parts[1].join("\n\t}");
	
	var indentation = routes.split('"')[0];
	
	parts[1] = "routes: {\n" + routes + ",\n" + indentation + "\"" + pagename + "\": \"" + pagename + "\"\n" + indentation.substr(1) + "}";

	return FS.write(src + "/js/controllers/router.js", parts.join("").trim());
}